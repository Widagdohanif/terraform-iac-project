name: Flask CI/CD Pipeline

on:
  push:
    branches: [main, staging, dev]
    paths-ignore:
      - 'README.md'
      - '**.md'
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: rr7x/iac-project
  AWS_REGION: us-east-1

jobs:
  build-test:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      environment: ${{ steps.env.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          cd app/src
          pip install --no-cache-dir -r requirements.txt
          pip install pytest pytest-cov

      - name: Run linting
        run: |
          cd app/src
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run tests
        run: |
          cd app/src
          python -m pytest --cov=. --cov-report=xml

      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=dev" >> $GITHUB_OUTPUT
          fi

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ steps.env.outputs.environment }}-{{sha}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./src
          file: ./src/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:${{ steps.env.outputs.environment }}
            ${{ env.DOCKER_IMAGE }}:${{ steps.env.outputs.environment }}-${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-infrastructure:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    environment: ${{ needs.build-test.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.0

      - name: Terraform Init - Infrastructure
        run: |
          cd iac
          terraform init

      - name: Terraform Plan - Infrastructure
        run: |
          cd iac
          terraform plan -no-color
        
      - name: Terraform Apply - Infrastructure
        if: github.ref != 'refs/heads/main' || github.event_name == 'push'
        run: |
          cd iac
          terraform apply -auto-approve

      - name: Get EKS cluster info
        id: eks-info
        run: |
          cd iac
          echo "cluster-name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT
          echo "cluster-endpoint=$(terraform output -raw cluster_endpoint)" >> $GITHUB_OUTPUT

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.eks-info.outputs.cluster-name }}

      - name: Wait for cluster to be ready
        run: |
          kubectl wait --for=condition=Ready nodes --all --timeout=300s

  deploy-application:
    needs: [build-test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    environment: ${{ needs.build-test.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Get EKS cluster info
        id: eks-info
        run: |
          cd iac
          terraform init
          echo "cluster-name=$(terraform output -raw cluster_name)" >> $GITHUB_OUTPUT

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ steps.eks-info.outputs.cluster-name }}

      - name: Update image in Kubernetes manifests
        run: |
          cd k8s-manifests
          # Update terraform.tfvars with new image
          sed -i 's|flask_image = ".*"|flask_image = "${{ env.DOCKER_IMAGE }}:${{ needs.build-test.outputs.environment }}-${{ github.sha }}"|g' terraform.tfvars

      - name: Terraform Init - Kubernetes
        run: |
          cd k8s-manifests
          terraform init

      - name: Terraform Plan - Kubernetes
        run: |
          cd k8s-manifests
          terraform plan -no-color

      - name: Terraform Apply - Kubernetes
        run: |
          cd k8s-manifests
          terraform apply -auto-approve

      - name: Wait for deployment
        run: |
          kubectl rollout status deployment/flask-app --timeout=300s
          kubectl rollout status deployment/nginx-loadbalancer --timeout=300s

      - name: Get LoadBalancer URL
        id: lb-url
        run: |
          LB_HOSTNAME=$(kubectl get svc nginx-loadbalancer-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "url=http://${LB_HOSTNAME}" >> $GITHUB_OUTPUT

      - name: Health check
        run: |
          sleep 60  # Wait for load balancer to be ready
          curl -f ${{ steps.lb-url.outputs.url }}/health || exit 1

      - name: Post deployment info
        run: |
          echo "🚀 Deployment successful!"
          echo "📱 Application URL: ${{ steps.lb-url.outputs.url }}"
          echo "📊 Metrics: ${{ steps.lb-url.outputs.url }}/metrics"
          echo "🏥 Health: ${{ steps.lb-url.outputs.url }}/health"
